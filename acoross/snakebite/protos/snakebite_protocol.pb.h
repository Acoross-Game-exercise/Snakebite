// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakebite_protocol.proto

#ifndef PROTOBUF_snakebite_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_snakebite_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace acoross {
namespace snakebite {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_snakebite_5fprotocol_2eproto();
void protobuf_AssignDesc_snakebite_5fprotocol_2eproto();
void protobuf_ShutdownFile_snakebite_5fprotocol_2eproto();

class HelloRequest;
class HelloReply;
class TurnKeyDownRequest;
class TurnKeyDownReply;
class TurnKeyUpRequest;
class TurnKeyUpReply;

// ===================================================================

class HelloRequest : public ::google::protobuf::Message {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();

  void Swap(HelloRequest* other);

  // implements Message ----------------------------------------------

  HelloRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.HelloRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_snakebite_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static HelloRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelloReply : public ::google::protobuf::Message {
 public:
  HelloReply();
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReply& default_instance();

  void Swap(HelloReply* other);

  // implements Message ----------------------------------------------

  HelloReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.HelloReply)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_snakebite_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static HelloReply* default_instance_;
};
// -------------------------------------------------------------------

class TurnKeyDownRequest : public ::google::protobuf::Message {
 public:
  TurnKeyDownRequest();
  virtual ~TurnKeyDownRequest();

  TurnKeyDownRequest(const TurnKeyDownRequest& from);

  inline TurnKeyDownRequest& operator=(const TurnKeyDownRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnKeyDownRequest& default_instance();

  void Swap(TurnKeyDownRequest* other);

  // implements Message ----------------------------------------------

  TurnKeyDownRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnKeyDownRequest& from);
  void MergeFrom(const TurnKeyDownRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.TurnKeyDownRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_snakebite_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static TurnKeyDownRequest* default_instance_;
};
// -------------------------------------------------------------------

class TurnKeyDownReply : public ::google::protobuf::Message {
 public:
  TurnKeyDownReply();
  virtual ~TurnKeyDownReply();

  TurnKeyDownReply(const TurnKeyDownReply& from);

  inline TurnKeyDownReply& operator=(const TurnKeyDownReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnKeyDownReply& default_instance();

  void Swap(TurnKeyDownReply* other);

  // implements Message ----------------------------------------------

  TurnKeyDownReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnKeyDownReply& from);
  void MergeFrom(const TurnKeyDownReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.TurnKeyDownReply)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_snakebite_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static TurnKeyDownReply* default_instance_;
};
// -------------------------------------------------------------------

class TurnKeyUpRequest : public ::google::protobuf::Message {
 public:
  TurnKeyUpRequest();
  virtual ~TurnKeyUpRequest();

  TurnKeyUpRequest(const TurnKeyUpRequest& from);

  inline TurnKeyUpRequest& operator=(const TurnKeyUpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnKeyUpRequest& default_instance();

  void Swap(TurnKeyUpRequest* other);

  // implements Message ----------------------------------------------

  TurnKeyUpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnKeyUpRequest& from);
  void MergeFrom(const TurnKeyUpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.TurnKeyUpRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_snakebite_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static TurnKeyUpRequest* default_instance_;
};
// -------------------------------------------------------------------

class TurnKeyUpReply : public ::google::protobuf::Message {
 public:
  TurnKeyUpReply();
  virtual ~TurnKeyUpReply();

  TurnKeyUpReply(const TurnKeyUpReply& from);

  inline TurnKeyUpReply& operator=(const TurnKeyUpReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnKeyUpReply& default_instance();

  void Swap(TurnKeyUpReply* other);

  // implements Message ----------------------------------------------

  TurnKeyUpReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnKeyUpReply& from);
  void MergeFrom(const TurnKeyUpReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.TurnKeyUpReply)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_snakebite_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_snakebite_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static TurnKeyUpReply* default_instance_;
};
// ===================================================================


// ===================================================================

// HelloRequest

// required string name = 1;
inline bool HelloRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HelloRequest::name() const {
  return *name_;
}
inline void HelloRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HelloRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HelloReply

// required string message = 1;
inline bool HelloReply::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloReply::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloReply::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloReply::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& HelloReply::message() const {
  return *message_;
}
inline void HelloReply::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void HelloReply::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void HelloReply::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloReply::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* HelloReply::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloReply::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TurnKeyDownRequest

// required int32 key = 1;
inline bool TurnKeyDownRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnKeyDownRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnKeyDownRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnKeyDownRequest::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TurnKeyDownRequest::key() const {
  return key_;
}
inline void TurnKeyDownRequest::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// TurnKeyDownReply

// required int32 key = 1;
inline bool TurnKeyDownReply::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnKeyDownReply::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnKeyDownReply::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnKeyDownReply::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TurnKeyDownReply::key() const {
  return key_;
}
inline void TurnKeyDownReply::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// TurnKeyUpRequest

// required int32 key = 1;
inline bool TurnKeyUpRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnKeyUpRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnKeyUpRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnKeyUpRequest::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TurnKeyUpRequest::key() const {
  return key_;
}
inline void TurnKeyUpRequest::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// TurnKeyUpReply

// required int32 key = 1;
inline bool TurnKeyUpReply::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnKeyUpReply::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnKeyUpReply::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnKeyUpReply::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 TurnKeyUpReply::key() const {
  return key_;
}
inline void TurnKeyUpReply::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace snakebite
}  // namespace acoross

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_snakebite_5fprotocol_2eproto__INCLUDED
