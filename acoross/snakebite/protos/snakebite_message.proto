// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package acoross.snakebite.messages;

//------------------------------
//------------------------------
service SC_PushService {
	rpc UpdateGameObjects(UpdateGameObjectsEvent) returns (VoidReply);
	rpc ResetPlayer(VoidReply) returns (VoidReply);
}

//------------------------------
enum ObjType
{
	Snake = 0;
	Apple = 1;
};

message MovingObject {
	double x = 1;
	double y = 2;
	double radius = 3;
}

message GameObjectClone {
	int32 clone_type = 1;
	string obj_name = 2;
	int64 handle = 3;
	MovingObject head = 4;
	repeated MovingObject body = 5;
}

message UpdateGameObjectsEvent {
	int32 idx_x = 1;
	int32 idx_y = 2;
	repeated GameObjectClone clone = 3;
}

//------------------------------
//------------------------------
service SnakebiteService {
	rpc RequestZoneInfo(VoidReply) returns (ZoneInfoReply);
	rpc InitPlayer(InitPlayerSnakeRequest) returns (InitPlayerSnakeReply);
	rpc SetKeyDown(TurnKeyDownRequest) returns (VoidReply);
	rpc SetKeyUp(TurnKeyUpRequest) returns (VoidReply);
}

//------------------------------
message VoidReply{
	int32 err = 1;
}

//------------------------------
message ZoneInfoReply{
	int32 height = 1;
	int32 width = 2;
	int32 limit_idx_x = 3;
	int32 limit_idx_y = 4;
}

//------------------------------
message InitPlayerSnakeRequest{
	string name = 1;
}

message InitPlayerSnakeReply{
	int64 handle = 1;
}

//------------------------------
message TurnKeyDownRequest {
	int32 key = 1;
}

//------------------------------
message TurnKeyUpRequest {
	int32 key = 1;
}