// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakebite_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "snakebite_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace acoross {
namespace snakebite {

namespace {

const ::google::protobuf::Descriptor* HelloRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnKeyDownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnKeyDownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnKeyDownReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnKeyDownReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnKeyUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnKeyUpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnKeyUpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnKeyUpReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_snakebite_5fmessage_2eproto() {
  protobuf_AddDesc_snakebite_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "snakebite_message.proto");
  GOOGLE_CHECK(file != NULL);
  HelloRequest_descriptor_ = file->message_type(0);
  static const int HelloRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRequest, name_),
  };
  HelloRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloRequest_descriptor_,
      HelloRequest::default_instance_,
      HelloRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloRequest));
  HelloReply_descriptor_ = file->message_type(1);
  static const int HelloReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, message_),
  };
  HelloReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloReply_descriptor_,
      HelloReply::default_instance_,
      HelloReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloReply));
  TurnKeyDownRequest_descriptor_ = file->message_type(2);
  static const int TurnKeyDownRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyDownRequest, key_),
  };
  TurnKeyDownRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnKeyDownRequest_descriptor_,
      TurnKeyDownRequest::default_instance_,
      TurnKeyDownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyDownRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyDownRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnKeyDownRequest));
  TurnKeyDownReply_descriptor_ = file->message_type(3);
  static const int TurnKeyDownReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyDownReply, key_),
  };
  TurnKeyDownReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnKeyDownReply_descriptor_,
      TurnKeyDownReply::default_instance_,
      TurnKeyDownReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyDownReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyDownReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnKeyDownReply));
  TurnKeyUpRequest_descriptor_ = file->message_type(4);
  static const int TurnKeyUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyUpRequest, key_),
  };
  TurnKeyUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnKeyUpRequest_descriptor_,
      TurnKeyUpRequest::default_instance_,
      TurnKeyUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnKeyUpRequest));
  TurnKeyUpReply_descriptor_ = file->message_type(5);
  static const int TurnKeyUpReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyUpReply, key_),
  };
  TurnKeyUpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnKeyUpReply_descriptor_,
      TurnKeyUpReply::default_instance_,
      TurnKeyUpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyUpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnKeyUpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnKeyUpReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_snakebite_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloRequest_descriptor_, &HelloRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloReply_descriptor_, &HelloReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnKeyDownRequest_descriptor_, &TurnKeyDownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnKeyDownReply_descriptor_, &TurnKeyDownReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnKeyUpRequest_descriptor_, &TurnKeyUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnKeyUpReply_descriptor_, &TurnKeyUpReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_snakebite_5fmessage_2eproto() {
  delete HelloRequest::default_instance_;
  delete HelloRequest_reflection_;
  delete HelloReply::default_instance_;
  delete HelloReply_reflection_;
  delete TurnKeyDownRequest::default_instance_;
  delete TurnKeyDownRequest_reflection_;
  delete TurnKeyDownReply::default_instance_;
  delete TurnKeyDownReply_reflection_;
  delete TurnKeyUpRequest::default_instance_;
  delete TurnKeyUpRequest_reflection_;
  delete TurnKeyUpReply::default_instance_;
  delete TurnKeyUpReply_reflection_;
}

void protobuf_AddDesc_snakebite_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027snakebite_message.proto\022\021acoross.snake"
    "bite\"\034\n\014HelloRequest\022\014\n\004name\030\001 \002(\t\"\035\n\nHe"
    "lloReply\022\017\n\007message\030\001 \002(\t\"!\n\022TurnKeyDown"
    "Request\022\013\n\003key\030\001 \002(\005\"\037\n\020TurnKeyDownReply"
    "\022\013\n\003key\030\001 \002(\005\"\037\n\020TurnKeyUpRequest\022\013\n\003key"
    "\030\001 \002(\005\"\035\n\016TurnKeyUpReply\022\013\n\003key\030\001 \002(\005", 237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "snakebite_message.proto", &protobuf_RegisterTypes);
  HelloRequest::default_instance_ = new HelloRequest();
  HelloReply::default_instance_ = new HelloReply();
  TurnKeyDownRequest::default_instance_ = new TurnKeyDownRequest();
  TurnKeyDownReply::default_instance_ = new TurnKeyDownReply();
  TurnKeyUpRequest::default_instance_ = new TurnKeyUpRequest();
  TurnKeyUpReply::default_instance_ = new TurnKeyUpReply();
  HelloRequest::default_instance_->InitAsDefaultInstance();
  HelloReply::default_instance_->InitAsDefaultInstance();
  TurnKeyDownRequest::default_instance_->InitAsDefaultInstance();
  TurnKeyDownReply::default_instance_->InitAsDefaultInstance();
  TurnKeyUpRequest::default_instance_->InitAsDefaultInstance();
  TurnKeyUpReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_snakebite_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_snakebite_5fmessage_2eproto {
  StaticDescriptorInitializer_snakebite_5fmessage_2eproto() {
    protobuf_AddDesc_snakebite_5fmessage_2eproto();
  }
} static_descriptor_initializer_snakebite_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HelloRequest::kNameFieldNumber;
#endif  // !_MSC_VER

HelloRequest::HelloRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloRequest::InitAsDefaultInstance() {
}

HelloRequest::HelloRequest(const HelloRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloRequest::~HelloRequest() {
  SharedDtor();
}

void HelloRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HelloRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloRequest_descriptor_;
}

const HelloRequest& HelloRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakebite_5fmessage_2eproto();
  return *default_instance_;
}

HelloRequest* HelloRequest::default_instance_ = NULL;

HelloRequest* HelloRequest::New() const {
  return new HelloRequest;
}

void HelloRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloRequest::MergeFrom(const HelloRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HelloRequest::Swap(HelloRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloRequest_descriptor_;
  metadata.reflection = HelloRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloReply::kMessageFieldNumber;
#endif  // !_MSC_VER

HelloReply::HelloReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HelloReply::InitAsDefaultInstance() {
}

HelloReply::HelloReply(const HelloReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HelloReply::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloReply::~HelloReply() {
  SharedDtor();
}

void HelloReply::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void HelloReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloReply_descriptor_;
}

const HelloReply& HelloReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakebite_5fmessage_2eproto();
  return *default_instance_;
}

HelloReply* HelloReply::default_instance_ = NULL;

HelloReply* HelloReply::New() const {
  return new HelloReply;
}

void HelloReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelloReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HelloReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HelloReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloReply::MergeFrom(const HelloReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReply::CopyFrom(const HelloReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HelloReply::Swap(HelloReply* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloReply_descriptor_;
  metadata.reflection = HelloReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnKeyDownRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

TurnKeyDownRequest::TurnKeyDownRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnKeyDownRequest::InitAsDefaultInstance() {
}

TurnKeyDownRequest::TurnKeyDownRequest(const TurnKeyDownRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnKeyDownRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnKeyDownRequest::~TurnKeyDownRequest() {
  SharedDtor();
}

void TurnKeyDownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnKeyDownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnKeyDownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnKeyDownRequest_descriptor_;
}

const TurnKeyDownRequest& TurnKeyDownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakebite_5fmessage_2eproto();
  return *default_instance_;
}

TurnKeyDownRequest* TurnKeyDownRequest::default_instance_ = NULL;

TurnKeyDownRequest* TurnKeyDownRequest::New() const {
  return new TurnKeyDownRequest;
}

void TurnKeyDownRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnKeyDownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnKeyDownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnKeyDownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnKeyDownRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnKeyDownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnKeyDownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnKeyDownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnKeyDownRequest::MergeFrom(const TurnKeyDownRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnKeyDownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnKeyDownRequest::CopyFrom(const TurnKeyDownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnKeyDownRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TurnKeyDownRequest::Swap(TurnKeyDownRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnKeyDownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnKeyDownRequest_descriptor_;
  metadata.reflection = TurnKeyDownRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnKeyDownReply::kKeyFieldNumber;
#endif  // !_MSC_VER

TurnKeyDownReply::TurnKeyDownReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnKeyDownReply::InitAsDefaultInstance() {
}

TurnKeyDownReply::TurnKeyDownReply(const TurnKeyDownReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnKeyDownReply::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnKeyDownReply::~TurnKeyDownReply() {
  SharedDtor();
}

void TurnKeyDownReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnKeyDownReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnKeyDownReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnKeyDownReply_descriptor_;
}

const TurnKeyDownReply& TurnKeyDownReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakebite_5fmessage_2eproto();
  return *default_instance_;
}

TurnKeyDownReply* TurnKeyDownReply::default_instance_ = NULL;

TurnKeyDownReply* TurnKeyDownReply::New() const {
  return new TurnKeyDownReply;
}

void TurnKeyDownReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnKeyDownReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnKeyDownReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnKeyDownReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnKeyDownReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnKeyDownReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnKeyDownReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnKeyDownReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnKeyDownReply::MergeFrom(const TurnKeyDownReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnKeyDownReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnKeyDownReply::CopyFrom(const TurnKeyDownReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnKeyDownReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TurnKeyDownReply::Swap(TurnKeyDownReply* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnKeyDownReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnKeyDownReply_descriptor_;
  metadata.reflection = TurnKeyDownReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnKeyUpRequest::kKeyFieldNumber;
#endif  // !_MSC_VER

TurnKeyUpRequest::TurnKeyUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnKeyUpRequest::InitAsDefaultInstance() {
}

TurnKeyUpRequest::TurnKeyUpRequest(const TurnKeyUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnKeyUpRequest::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnKeyUpRequest::~TurnKeyUpRequest() {
  SharedDtor();
}

void TurnKeyUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnKeyUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnKeyUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnKeyUpRequest_descriptor_;
}

const TurnKeyUpRequest& TurnKeyUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakebite_5fmessage_2eproto();
  return *default_instance_;
}

TurnKeyUpRequest* TurnKeyUpRequest::default_instance_ = NULL;

TurnKeyUpRequest* TurnKeyUpRequest::New() const {
  return new TurnKeyUpRequest;
}

void TurnKeyUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnKeyUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnKeyUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnKeyUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnKeyUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnKeyUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnKeyUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnKeyUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnKeyUpRequest::MergeFrom(const TurnKeyUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnKeyUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnKeyUpRequest::CopyFrom(const TurnKeyUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnKeyUpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TurnKeyUpRequest::Swap(TurnKeyUpRequest* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnKeyUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnKeyUpRequest_descriptor_;
  metadata.reflection = TurnKeyUpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnKeyUpReply::kKeyFieldNumber;
#endif  // !_MSC_VER

TurnKeyUpReply::TurnKeyUpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurnKeyUpReply::InitAsDefaultInstance() {
}

TurnKeyUpReply::TurnKeyUpReply(const TurnKeyUpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurnKeyUpReply::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnKeyUpReply::~TurnKeyUpReply() {
  SharedDtor();
}

void TurnKeyUpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurnKeyUpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnKeyUpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnKeyUpReply_descriptor_;
}

const TurnKeyUpReply& TurnKeyUpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakebite_5fmessage_2eproto();
  return *default_instance_;
}

TurnKeyUpReply* TurnKeyUpReply::default_instance_ = NULL;

TurnKeyUpReply* TurnKeyUpReply::New() const {
  return new TurnKeyUpReply;
}

void TurnKeyUpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnKeyUpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurnKeyUpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurnKeyUpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurnKeyUpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnKeyUpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnKeyUpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnKeyUpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnKeyUpReply::MergeFrom(const TurnKeyUpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnKeyUpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnKeyUpReply::CopyFrom(const TurnKeyUpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnKeyUpReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TurnKeyUpReply::Swap(TurnKeyUpReply* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnKeyUpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnKeyUpReply_descriptor_;
  metadata.reflection = TurnKeyUpReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace snakebite
}  // namespace acoross

// @@protoc_insertion_point(global_scope)
