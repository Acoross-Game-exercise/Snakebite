// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sc_snakebite_message.proto

#ifndef PROTOBUF_sc_5fsnakebite_5fmessage_2eproto__INCLUDED
#define PROTOBUF_sc_5fsnakebite_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace acoross {
namespace snakebite {
namespace sc_messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
void protobuf_AssignDesc_sc_5fsnakebite_5fmessage_2eproto();
void protobuf_ShutdownFile_sc_5fsnakebite_5fmessage_2eproto();

class GameObjectClone;
class InitPlayerSnakeReply;
class MovingObject;
class UpdateGameObjects;

enum ObjType {
  Snake = 0,
  Apple = 1,
  ObjType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjType_IsValid(int value);
const ObjType ObjType_MIN = Snake;
const ObjType ObjType_MAX = Apple;
const int ObjType_ARRAYSIZE = ObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjType_descriptor();
inline const ::std::string& ObjType_Name(ObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjType_descriptor(), value);
}
inline bool ObjType_Parse(
    const ::std::string& name, ObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjType>(
    ObjType_descriptor(), name, value);
}
// ===================================================================

class InitPlayerSnakeReply : public ::google::protobuf::Message {
 public:
  InitPlayerSnakeReply();
  virtual ~InitPlayerSnakeReply();

  InitPlayerSnakeReply(const InitPlayerSnakeReply& from);

  inline InitPlayerSnakeReply& operator=(const InitPlayerSnakeReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitPlayerSnakeReply& default_instance();

  void Swap(InitPlayerSnakeReply* other);

  // implements Message ----------------------------------------------

  inline InitPlayerSnakeReply* New() const { return New(NULL); }

  InitPlayerSnakeReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitPlayerSnakeReply& from);
  void MergeFrom(const InitPlayerSnakeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitPlayerSnakeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.sc_messages.InitPlayerSnakeReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 handle_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_AssignDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_sc_5fsnakebite_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static InitPlayerSnakeReply* default_instance_;
};
// -------------------------------------------------------------------

class MovingObject : public ::google::protobuf::Message {
 public:
  MovingObject();
  virtual ~MovingObject();

  MovingObject(const MovingObject& from);

  inline MovingObject& operator=(const MovingObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MovingObject& default_instance();

  void Swap(MovingObject* other);

  // implements Message ----------------------------------------------

  inline MovingObject* New() const { return New(NULL); }

  MovingObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MovingObject& from);
  void MergeFrom(const MovingObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MovingObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:acoross.snakebite.sc_messages.MovingObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  double radius_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_AssignDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_sc_5fsnakebite_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static MovingObject* default_instance_;
};
// -------------------------------------------------------------------

class GameObjectClone : public ::google::protobuf::Message {
 public:
  GameObjectClone();
  virtual ~GameObjectClone();

  GameObjectClone(const GameObjectClone& from);

  inline GameObjectClone& operator=(const GameObjectClone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameObjectClone& default_instance();

  void Swap(GameObjectClone* other);

  // implements Message ----------------------------------------------

  inline GameObjectClone* New() const { return New(NULL); }

  GameObjectClone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameObjectClone& from);
  void MergeFrom(const GameObjectClone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameObjectClone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 clone_type = 1;
  void clear_clone_type();
  static const int kCloneTypeFieldNumber = 1;
  ::google::protobuf::int32 clone_type() const;
  void set_clone_type(::google::protobuf::int32 value);

  // optional string obj_name = 2;
  void clear_obj_name();
  static const int kObjNameFieldNumber = 2;
  const ::std::string& obj_name() const;
  void set_obj_name(const ::std::string& value);
  void set_obj_name(const char* value);
  void set_obj_name(const char* value, size_t size);
  ::std::string* mutable_obj_name();
  ::std::string* release_obj_name();
  void set_allocated_obj_name(::std::string* obj_name);

  // optional int64 handle = 3;
  void clear_handle();
  static const int kHandleFieldNumber = 3;
  ::google::protobuf::int64 handle() const;
  void set_handle(::google::protobuf::int64 value);

  // optional .acoross.snakebite.sc_messages.MovingObject head = 4;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 4;
  const ::acoross::snakebite::sc_messages::MovingObject& head() const;
  ::acoross::snakebite::sc_messages::MovingObject* mutable_head();
  ::acoross::snakebite::sc_messages::MovingObject* release_head();
  void set_allocated_head(::acoross::snakebite::sc_messages::MovingObject* head);

  // repeated .acoross.snakebite.sc_messages.MovingObject body = 5;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 5;
  const ::acoross::snakebite::sc_messages::MovingObject& body(int index) const;
  ::acoross::snakebite::sc_messages::MovingObject* mutable_body(int index);
  ::acoross::snakebite::sc_messages::MovingObject* add_body();
  ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::MovingObject >*
      mutable_body();
  const ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::MovingObject >&
      body() const;

  // @@protoc_insertion_point(class_scope:acoross.snakebite.sc_messages.GameObjectClone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr obj_name_;
  ::google::protobuf::int64 handle_;
  ::acoross::snakebite::sc_messages::MovingObject* head_;
  ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::MovingObject > body_;
  ::google::protobuf::int32 clone_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_AssignDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_sc_5fsnakebite_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static GameObjectClone* default_instance_;
};
// -------------------------------------------------------------------

class UpdateGameObjects : public ::google::protobuf::Message {
 public:
  UpdateGameObjects();
  virtual ~UpdateGameObjects();

  UpdateGameObjects(const UpdateGameObjects& from);

  inline UpdateGameObjects& operator=(const UpdateGameObjects& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGameObjects& default_instance();

  void Swap(UpdateGameObjects* other);

  // implements Message ----------------------------------------------

  inline UpdateGameObjects* New() const { return New(NULL); }

  UpdateGameObjects* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateGameObjects& from);
  void MergeFrom(const UpdateGameObjects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateGameObjects* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .acoross.snakebite.sc_messages.GameObjectClone clone = 1;
  int clone_size() const;
  void clear_clone();
  static const int kCloneFieldNumber = 1;
  const ::acoross::snakebite::sc_messages::GameObjectClone& clone(int index) const;
  ::acoross::snakebite::sc_messages::GameObjectClone* mutable_clone(int index);
  ::acoross::snakebite::sc_messages::GameObjectClone* add_clone();
  ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::GameObjectClone >*
      mutable_clone();
  const ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::GameObjectClone >&
      clone() const;

  // @@protoc_insertion_point(class_scope:acoross.snakebite.sc_messages.UpdateGameObjects)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::GameObjectClone > clone_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_AssignDesc_sc_5fsnakebite_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_sc_5fsnakebite_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static UpdateGameObjects* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InitPlayerSnakeReply

// optional int64 handle = 1;
inline void InitPlayerSnakeReply::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InitPlayerSnakeReply::handle() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.InitPlayerSnakeReply.handle)
  return handle_;
}
inline void InitPlayerSnakeReply::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.InitPlayerSnakeReply.handle)
}

// -------------------------------------------------------------------

// MovingObject

// optional double x = 1;
inline void MovingObject::clear_x() {
  x_ = 0;
}
inline double MovingObject::x() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.MovingObject.x)
  return x_;
}
inline void MovingObject::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.MovingObject.x)
}

// optional double y = 2;
inline void MovingObject::clear_y() {
  y_ = 0;
}
inline double MovingObject::y() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.MovingObject.y)
  return y_;
}
inline void MovingObject::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.MovingObject.y)
}

// optional double radius = 3;
inline void MovingObject::clear_radius() {
  radius_ = 0;
}
inline double MovingObject::radius() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.MovingObject.radius)
  return radius_;
}
inline void MovingObject::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.MovingObject.radius)
}

// -------------------------------------------------------------------

// GameObjectClone

// optional int32 clone_type = 1;
inline void GameObjectClone::clear_clone_type() {
  clone_type_ = 0;
}
inline ::google::protobuf::int32 GameObjectClone::clone_type() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.clone_type)
  return clone_type_;
}
inline void GameObjectClone::set_clone_type(::google::protobuf::int32 value) {
  
  clone_type_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.GameObjectClone.clone_type)
}

// optional string obj_name = 2;
inline void GameObjectClone::clear_obj_name() {
  obj_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameObjectClone::obj_name() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.obj_name)
  return obj_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameObjectClone::set_obj_name(const ::std::string& value) {
  
  obj_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.GameObjectClone.obj_name)
}
inline void GameObjectClone::set_obj_name(const char* value) {
  
  obj_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acoross.snakebite.sc_messages.GameObjectClone.obj_name)
}
inline void GameObjectClone::set_obj_name(const char* value, size_t size) {
  
  obj_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acoross.snakebite.sc_messages.GameObjectClone.obj_name)
}
inline ::std::string* GameObjectClone::mutable_obj_name() {
  
  // @@protoc_insertion_point(field_mutable:acoross.snakebite.sc_messages.GameObjectClone.obj_name)
  return obj_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameObjectClone::release_obj_name() {
  
  return obj_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameObjectClone::set_allocated_obj_name(::std::string* obj_name) {
  if (obj_name != NULL) {
    
  } else {
    
  }
  obj_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_name);
  // @@protoc_insertion_point(field_set_allocated:acoross.snakebite.sc_messages.GameObjectClone.obj_name)
}

// optional int64 handle = 3;
inline void GameObjectClone::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameObjectClone::handle() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.handle)
  return handle_;
}
inline void GameObjectClone::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.GameObjectClone.handle)
}

// optional .acoross.snakebite.sc_messages.MovingObject head = 4;
inline bool GameObjectClone::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void GameObjectClone::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::acoross::snakebite::sc_messages::MovingObject& GameObjectClone::head() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::acoross::snakebite::sc_messages::MovingObject;
  }
  // @@protoc_insertion_point(field_mutable:acoross.snakebite.sc_messages.GameObjectClone.head)
  return head_;
}
inline ::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::release_head() {
  
  ::acoross::snakebite::sc_messages::MovingObject* temp = head_;
  head_ = NULL;
  return temp;
}
inline void GameObjectClone::set_allocated_head(::acoross::snakebite::sc_messages::MovingObject* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:acoross.snakebite.sc_messages.GameObjectClone.head)
}

// repeated .acoross.snakebite.sc_messages.MovingObject body = 5;
inline int GameObjectClone::body_size() const {
  return body_.size();
}
inline void GameObjectClone::clear_body() {
  body_.Clear();
}
inline const ::acoross::snakebite::sc_messages::MovingObject& GameObjectClone::body(int index) const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_.Get(index);
}
inline ::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_.Mutable(index);
}
inline ::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::add_body() {
  // @@protoc_insertion_point(field_add:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::MovingObject >*
GameObjectClone::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:acoross.snakebite.sc_messages.GameObjectClone.body)
  return &body_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::MovingObject >&
GameObjectClone::body() const {
  // @@protoc_insertion_point(field_list:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_;
}

// -------------------------------------------------------------------

// UpdateGameObjects

// repeated .acoross.snakebite.sc_messages.GameObjectClone clone = 1;
inline int UpdateGameObjects::clone_size() const {
  return clone_.size();
}
inline void UpdateGameObjects::clear_clone() {
  clone_.Clear();
}
inline const ::acoross::snakebite::sc_messages::GameObjectClone& UpdateGameObjects::clone(int index) const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_.Get(index);
}
inline ::acoross::snakebite::sc_messages::GameObjectClone* UpdateGameObjects::mutable_clone(int index) {
  // @@protoc_insertion_point(field_mutable:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_.Mutable(index);
}
inline ::acoross::snakebite::sc_messages::GameObjectClone* UpdateGameObjects::add_clone() {
  // @@protoc_insertion_point(field_add:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::GameObjectClone >*
UpdateGameObjects::mutable_clone() {
  // @@protoc_insertion_point(field_mutable_list:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return &clone_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::GameObjectClone >&
UpdateGameObjects::clone() const {
  // @@protoc_insertion_point(field_list:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sc_messages
}  // namespace snakebite
}  // namespace acoross

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::acoross::snakebite::sc_messages::ObjType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acoross::snakebite::sc_messages::ObjType>() {
  return ::acoross::snakebite::sc_messages::ObjType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sc_5fsnakebite_5fmessage_2eproto__INCLUDED
