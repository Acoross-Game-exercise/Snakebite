// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sc_snakebite_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sc_snakebite_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace acoross {
namespace snakebite {
namespace sc_messages {

namespace {

const ::google::protobuf::Descriptor* MovingObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovingObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameObjectClone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameObjectClone_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGameObjects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGameObjects_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sc_5fsnakebite_5fmessage_2eproto() {
  protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sc_snakebite_message.proto");
  GOOGLE_CHECK(file != NULL);
  MovingObject_descriptor_ = file->message_type(0);
  static const int MovingObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, radius_),
  };
  MovingObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MovingObject_descriptor_,
      MovingObject::default_instance_,
      MovingObject_offsets_,
      -1,
      -1,
      -1,
      sizeof(MovingObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovingObject, _is_default_instance_));
  GameObjectClone_descriptor_ = file->message_type(1);
  static const int GameObjectClone_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObjectClone, clone_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObjectClone, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObjectClone, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObjectClone, body_),
  };
  GameObjectClone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameObjectClone_descriptor_,
      GameObjectClone::default_instance_,
      GameObjectClone_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameObjectClone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObjectClone, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObjectClone, _is_default_instance_));
  UpdateGameObjects_descriptor_ = file->message_type(2);
  static const int UpdateGameObjects_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameObjects, clone_),
  };
  UpdateGameObjects_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateGameObjects_descriptor_,
      UpdateGameObjects::default_instance_,
      UpdateGameObjects_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateGameObjects),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameObjects, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameObjects, _is_default_instance_));
  ObjType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sc_5fsnakebite_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MovingObject_descriptor_, &MovingObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameObjectClone_descriptor_, &GameObjectClone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateGameObjects_descriptor_, &UpdateGameObjects::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sc_5fsnakebite_5fmessage_2eproto() {
  delete MovingObject::default_instance_;
  delete MovingObject_reflection_;
  delete GameObjectClone::default_instance_;
  delete GameObjectClone_reflection_;
  delete UpdateGameObjects::default_instance_;
  delete UpdateGameObjects_reflection_;
}

void protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032sc_snakebite_message.proto\022\035acoross.sn"
    "akebite.sc_messages\"4\n\014MovingObject\022\t\n\001x"
    "\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\016\n\006radius\030\003 \001(\001\"\253\001\n\017Ga"
    "meObjectClone\022\022\n\nclone_type\030\001 \001(\005\022\016\n\006han"
    "dle\030\002 \001(\003\0229\n\004head\030\003 \001(\0132+.acoross.snakeb"
    "ite.sc_messages.MovingObject\0229\n\004body\030\004 \003"
    "(\0132+.acoross.snakebite.sc_messages.Movin"
    "gObject\"R\n\021UpdateGameObjects\022=\n\005clone\030\001 "
    "\003(\0132..acoross.snakebite.sc_messages.Game"
    "ObjectClone*\037\n\007ObjType\022\t\n\005Snake\020\000\022\t\n\005App"
    "le\020\001b\006proto3", 412);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sc_snakebite_message.proto", &protobuf_RegisterTypes);
  MovingObject::default_instance_ = new MovingObject();
  GameObjectClone::default_instance_ = new GameObjectClone();
  UpdateGameObjects::default_instance_ = new UpdateGameObjects();
  MovingObject::default_instance_->InitAsDefaultInstance();
  GameObjectClone::default_instance_->InitAsDefaultInstance();
  UpdateGameObjects::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sc_5fsnakebite_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sc_5fsnakebite_5fmessage_2eproto {
  StaticDescriptorInitializer_sc_5fsnakebite_5fmessage_2eproto() {
    protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  }
} static_descriptor_initializer_sc_5fsnakebite_5fmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* ObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjType_descriptor_;
}
bool ObjType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovingObject::kXFieldNumber;
const int MovingObject::kYFieldNumber;
const int MovingObject::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovingObject::MovingObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:acoross.snakebite.sc_messages.MovingObject)
}

void MovingObject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MovingObject::MovingObject(const MovingObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:acoross.snakebite.sc_messages.MovingObject)
}

void MovingObject::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  radius_ = 0;
}

MovingObject::~MovingObject() {
  // @@protoc_insertion_point(destructor:acoross.snakebite.sc_messages.MovingObject)
  SharedDtor();
}

void MovingObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MovingObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovingObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovingObject_descriptor_;
}

const MovingObject& MovingObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  return *default_instance_;
}

MovingObject* MovingObject::default_instance_ = NULL;

MovingObject* MovingObject::New(::google::protobuf::Arena* arena) const {
  MovingObject* n = new MovingObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovingObject::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MovingObject*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, radius_);

#undef ZR_HELPER_
#undef ZR_

}

bool MovingObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acoross.snakebite.sc_messages.MovingObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_radius;
        break;
      }

      // optional double radius = 3;
      case 3: {
        if (tag == 25) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acoross.snakebite.sc_messages.MovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acoross.snakebite.sc_messages.MovingObject)
  return false;
#undef DO_
}

void MovingObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acoross.snakebite.sc_messages.MovingObject)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  // @@protoc_insertion_point(serialize_end:acoross.snakebite.sc_messages.MovingObject)
}

::google::protobuf::uint8* MovingObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:acoross.snakebite.sc_messages.MovingObject)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:acoross.snakebite.sc_messages.MovingObject)
  return target;
}

int MovingObject::ByteSize() const {
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovingObject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MovingObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MovingObject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MovingObject::MergeFrom(const MovingObject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void MovingObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject::CopyFrom(const MovingObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject::IsInitialized() const {

  return true;
}

void MovingObject::Swap(MovingObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovingObject::InternalSwap(MovingObject* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(radius_, other->radius_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovingObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovingObject_descriptor_;
  metadata.reflection = MovingObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MovingObject

// optional double x = 1;
void MovingObject::clear_x() {
  x_ = 0;
}
 double MovingObject::x() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.MovingObject.x)
  return x_;
}
 void MovingObject::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.MovingObject.x)
}

// optional double y = 2;
void MovingObject::clear_y() {
  y_ = 0;
}
 double MovingObject::y() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.MovingObject.y)
  return y_;
}
 void MovingObject::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.MovingObject.y)
}

// optional double radius = 3;
void MovingObject::clear_radius() {
  radius_ = 0;
}
 double MovingObject::radius() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.MovingObject.radius)
  return radius_;
}
 void MovingObject::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.MovingObject.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameObjectClone::kCloneTypeFieldNumber;
const int GameObjectClone::kHandleFieldNumber;
const int GameObjectClone::kHeadFieldNumber;
const int GameObjectClone::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameObjectClone::GameObjectClone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:acoross.snakebite.sc_messages.GameObjectClone)
}

void GameObjectClone::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::acoross::snakebite::sc_messages::MovingObject*>(&::acoross::snakebite::sc_messages::MovingObject::default_instance());
}

GameObjectClone::GameObjectClone(const GameObjectClone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:acoross.snakebite.sc_messages.GameObjectClone)
}

void GameObjectClone::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clone_type_ = 0;
  handle_ = GOOGLE_LONGLONG(0);
  head_ = NULL;
}

GameObjectClone::~GameObjectClone() {
  // @@protoc_insertion_point(destructor:acoross.snakebite.sc_messages.GameObjectClone)
  SharedDtor();
}

void GameObjectClone::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void GameObjectClone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameObjectClone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameObjectClone_descriptor_;
}

const GameObjectClone& GameObjectClone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  return *default_instance_;
}

GameObjectClone* GameObjectClone::default_instance_ = NULL;

GameObjectClone* GameObjectClone::New(::google::protobuf::Arena* arena) const {
  GameObjectClone* n = new GameObjectClone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameObjectClone::Clear() {
  clone_type_ = 0;
  handle_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  body_.Clear();
}

bool GameObjectClone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acoross.snakebite.sc_messages.GameObjectClone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clone_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clone_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handle;
        break;
      }

      // optional int64 handle = 2;
      case 2: {
        if (tag == 16) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }

      // optional .acoross.snakebite.sc_messages.MovingObject head = 3;
      case 3: {
        if (tag == 26) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // repeated .acoross.snakebite.sc_messages.MovingObject body = 4;
      case 4: {
        if (tag == 34) {
         parse_body:
          DO_(input->IncrementRecursionDepth());
         parse_loop_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_body;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acoross.snakebite.sc_messages.GameObjectClone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acoross.snakebite.sc_messages.GameObjectClone)
  return false;
#undef DO_
}

void GameObjectClone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acoross.snakebite.sc_messages.GameObjectClone)
  // optional int32 clone_type = 1;
  if (this->clone_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clone_type(), output);
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->handle(), output);
  }

  // optional .acoross.snakebite.sc_messages.MovingObject head = 3;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->head_, output);
  }

  // repeated .acoross.snakebite.sc_messages.MovingObject body = 4;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->body(i), output);
  }

  // @@protoc_insertion_point(serialize_end:acoross.snakebite.sc_messages.GameObjectClone)
}

::google::protobuf::uint8* GameObjectClone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:acoross.snakebite.sc_messages.GameObjectClone)
  // optional int32 clone_type = 1;
  if (this->clone_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clone_type(), target);
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->handle(), target);
  }

  // optional .acoross.snakebite.sc_messages.MovingObject head = 3;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->head_, target);
  }

  // repeated .acoross.snakebite.sc_messages.MovingObject body = 4;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->body(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:acoross.snakebite.sc_messages.GameObjectClone)
  return target;
}

int GameObjectClone::ByteSize() const {
  int total_size = 0;

  // optional int32 clone_type = 1;
  if (this->clone_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clone_type());
  }

  // optional int64 handle = 2;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->handle());
  }

  // optional .acoross.snakebite.sc_messages.MovingObject head = 3;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // repeated .acoross.snakebite.sc_messages.MovingObject body = 4;
  total_size += 1 * this->body_size();
  for (int i = 0; i < this->body_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->body(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameObjectClone::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameObjectClone* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameObjectClone>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameObjectClone::MergeFrom(const GameObjectClone& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  body_.MergeFrom(from.body_);
  if (from.clone_type() != 0) {
    set_clone_type(from.clone_type());
  }
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
  if (from.has_head()) {
    mutable_head()->::acoross::snakebite::sc_messages::MovingObject::MergeFrom(from.head());
  }
}

void GameObjectClone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameObjectClone::CopyFrom(const GameObjectClone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameObjectClone::IsInitialized() const {

  return true;
}

void GameObjectClone::Swap(GameObjectClone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameObjectClone::InternalSwap(GameObjectClone* other) {
  std::swap(clone_type_, other->clone_type_);
  std::swap(handle_, other->handle_);
  std::swap(head_, other->head_);
  body_.UnsafeArenaSwap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameObjectClone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameObjectClone_descriptor_;
  metadata.reflection = GameObjectClone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameObjectClone

// optional int32 clone_type = 1;
void GameObjectClone::clear_clone_type() {
  clone_type_ = 0;
}
 ::google::protobuf::int32 GameObjectClone::clone_type() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.clone_type)
  return clone_type_;
}
 void GameObjectClone::set_clone_type(::google::protobuf::int32 value) {
  
  clone_type_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.GameObjectClone.clone_type)
}

// optional int64 handle = 2;
void GameObjectClone::clear_handle() {
  handle_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GameObjectClone::handle() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.handle)
  return handle_;
}
 void GameObjectClone::set_handle(::google::protobuf::int64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:acoross.snakebite.sc_messages.GameObjectClone.handle)
}

// optional .acoross.snakebite.sc_messages.MovingObject head = 3;
bool GameObjectClone::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void GameObjectClone::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::acoross::snakebite::sc_messages::MovingObject& GameObjectClone::head() const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::acoross::snakebite::sc_messages::MovingObject;
  }
  // @@protoc_insertion_point(field_mutable:acoross.snakebite.sc_messages.GameObjectClone.head)
  return head_;
}
::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::release_head() {
  
  ::acoross::snakebite::sc_messages::MovingObject* temp = head_;
  head_ = NULL;
  return temp;
}
void GameObjectClone::set_allocated_head(::acoross::snakebite::sc_messages::MovingObject* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:acoross.snakebite.sc_messages.GameObjectClone.head)
}

// repeated .acoross.snakebite.sc_messages.MovingObject body = 4;
int GameObjectClone::body_size() const {
  return body_.size();
}
void GameObjectClone::clear_body() {
  body_.Clear();
}
const ::acoross::snakebite::sc_messages::MovingObject& GameObjectClone::body(int index) const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_.Get(index);
}
::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_.Mutable(index);
}
::acoross::snakebite::sc_messages::MovingObject* GameObjectClone::add_body() {
  // @@protoc_insertion_point(field_add:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_.Add();
}
::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::MovingObject >*
GameObjectClone::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:acoross.snakebite.sc_messages.GameObjectClone.body)
  return &body_;
}
const ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::MovingObject >&
GameObjectClone::body() const {
  // @@protoc_insertion_point(field_list:acoross.snakebite.sc_messages.GameObjectClone.body)
  return body_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGameObjects::kCloneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGameObjects::UpdateGameObjects()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:acoross.snakebite.sc_messages.UpdateGameObjects)
}

void UpdateGameObjects::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateGameObjects::UpdateGameObjects(const UpdateGameObjects& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:acoross.snakebite.sc_messages.UpdateGameObjects)
}

void UpdateGameObjects::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

UpdateGameObjects::~UpdateGameObjects() {
  // @@protoc_insertion_point(destructor:acoross.snakebite.sc_messages.UpdateGameObjects)
  SharedDtor();
}

void UpdateGameObjects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGameObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGameObjects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGameObjects_descriptor_;
}

const UpdateGameObjects& UpdateGameObjects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sc_5fsnakebite_5fmessage_2eproto();
  return *default_instance_;
}

UpdateGameObjects* UpdateGameObjects::default_instance_ = NULL;

UpdateGameObjects* UpdateGameObjects::New(::google::protobuf::Arena* arena) const {
  UpdateGameObjects* n = new UpdateGameObjects;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateGameObjects::Clear() {
  clone_.Clear();
}

bool UpdateGameObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acoross.snakebite.sc_messages.UpdateGameObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acoross.snakebite.sc_messages.GameObjectClone clone = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_clone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_clone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_clone;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acoross.snakebite.sc_messages.UpdateGameObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acoross.snakebite.sc_messages.UpdateGameObjects)
  return false;
#undef DO_
}

void UpdateGameObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acoross.snakebite.sc_messages.UpdateGameObjects)
  // repeated .acoross.snakebite.sc_messages.GameObjectClone clone = 1;
  for (unsigned int i = 0, n = this->clone_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clone(i), output);
  }

  // @@protoc_insertion_point(serialize_end:acoross.snakebite.sc_messages.UpdateGameObjects)
}

::google::protobuf::uint8* UpdateGameObjects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:acoross.snakebite.sc_messages.UpdateGameObjects)
  // repeated .acoross.snakebite.sc_messages.GameObjectClone clone = 1;
  for (unsigned int i = 0, n = this->clone_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clone(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:acoross.snakebite.sc_messages.UpdateGameObjects)
  return target;
}

int UpdateGameObjects::ByteSize() const {
  int total_size = 0;

  // repeated .acoross.snakebite.sc_messages.GameObjectClone clone = 1;
  total_size += 1 * this->clone_size();
  for (int i = 0; i < this->clone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clone(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGameObjects::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateGameObjects* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateGameObjects>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGameObjects::MergeFrom(const UpdateGameObjects& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  clone_.MergeFrom(from.clone_);
}

void UpdateGameObjects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGameObjects::CopyFrom(const UpdateGameObjects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGameObjects::IsInitialized() const {

  return true;
}

void UpdateGameObjects::Swap(UpdateGameObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGameObjects::InternalSwap(UpdateGameObjects* other) {
  clone_.UnsafeArenaSwap(&other->clone_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateGameObjects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGameObjects_descriptor_;
  metadata.reflection = UpdateGameObjects_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateGameObjects

// repeated .acoross.snakebite.sc_messages.GameObjectClone clone = 1;
int UpdateGameObjects::clone_size() const {
  return clone_.size();
}
void UpdateGameObjects::clear_clone() {
  clone_.Clear();
}
const ::acoross::snakebite::sc_messages::GameObjectClone& UpdateGameObjects::clone(int index) const {
  // @@protoc_insertion_point(field_get:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_.Get(index);
}
::acoross::snakebite::sc_messages::GameObjectClone* UpdateGameObjects::mutable_clone(int index) {
  // @@protoc_insertion_point(field_mutable:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_.Mutable(index);
}
::acoross::snakebite::sc_messages::GameObjectClone* UpdateGameObjects::add_clone() {
  // @@protoc_insertion_point(field_add:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_.Add();
}
::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::GameObjectClone >*
UpdateGameObjects::mutable_clone() {
  // @@protoc_insertion_point(field_mutable_list:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return &clone_;
}
const ::google::protobuf::RepeatedPtrField< ::acoross::snakebite::sc_messages::GameObjectClone >&
UpdateGameObjects::clone() const {
  // @@protoc_insertion_point(field_list:acoross.snakebite.sc_messages.UpdateGameObjects.clone)
  return clone_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sc_messages
}  // namespace snakebite
}  // namespace acoross

// @@protoc_insertion_point(global_scope)
